// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// PhoneConfirmator is an autogenerated mock type for the PhoneConfirmator type
type PhoneConfirmator struct {
	mock.Mock
}

// ConfirmUser provides a mock function with given fields: ctx, code
func (_m *PhoneConfirmator) ConfirmUser(ctx context.Context, code string) (int, *errors.Error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmUser")
	}

	var r0 int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, *errors.Error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.Error); ok {
		r1 = rf(ctx, code)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// ToConfirming provides a mock function with given fields: ctx, userId, phone
func (_m *PhoneConfirmator) ToConfirming(ctx context.Context, userId int, phone string) *errors.Error {
	ret := _m.Called(ctx, userId, phone)

	if len(ret) == 0 {
		panic("no return value specified for ToConfirming")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, userId, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// NewPhoneConfirmator creates a new instance of PhoneConfirmator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhoneConfirmator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhoneConfirmator {
	mock := &PhoneConfirmator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
