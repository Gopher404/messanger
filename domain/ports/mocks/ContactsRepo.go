// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	models "messanger/domain/models"
)

// ContactsRepo is an autogenerated mock type for the ContactsRepo type
type ContactsRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, contact
func (_m *ContactsRepo) Create(ctx context.Context, contact *models.Contact) *errors.Error {
	ret := _m.Called(ctx, contact)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Contact) *errors.Error); ok {
		r0 = rf(ctx, contact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userId, contactId
func (_m *ContactsRepo) Delete(ctx context.Context, userId int, contactId int) *errors.Error {
	ret := _m.Called(ctx, userId, contactId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *errors.Error); ok {
		r0 = rf(ctx, userId, contactId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// GetContact provides a mock function with given fields: ctx, userId, contactId
func (_m *ContactsRepo) GetContact(ctx context.Context, userId int, contactId int) (*models.Contact, *errors.Error) {
	ret := _m.Called(ctx, userId, contactId)

	if len(ret) == 0 {
		panic("no return value specified for GetContact")
	}

	var r0 *models.Contact
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*models.Contact, *errors.Error)); ok {
		return rf(ctx, userId, contactId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *models.Contact); ok {
		r0 = rf(ctx, userId, contactId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) *errors.Error); ok {
		r1 = rf(ctx, userId, contactId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetContactsByUser provides a mock function with given fields: ctx, userId
func (_m *ContactsRepo) GetContactsByUser(ctx context.Context, userId int) ([]models.Contact, *errors.Error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetContactsByUser")
	}

	var r0 []models.Contact
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Contact, *errors.Error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Contact); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// SetContactName provides a mock function with given fields: ctx, userid, contactId, name
func (_m *ContactsRepo) SetContactName(ctx context.Context, userid int, contactId int, name string) *errors.Error {
	ret := _m.Called(ctx, userid, contactId, name)

	if len(ret) == 0 {
		panic("no return value specified for SetContactName")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) *errors.Error); ok {
		r0 = rf(ctx, userid, contactId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// NewContactsRepo creates a new instance of ContactsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContactsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContactsRepo {
	mock := &ContactsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
