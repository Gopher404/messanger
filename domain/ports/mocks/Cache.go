// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Del provides a mock function with given fields: ctx, key
func (_m *Cache) Del(ctx context.Context, key string) *errors.Error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) *errors.Error); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cache) Get(ctx context.Context, key string) (int, *errors.Error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, *errors.Error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.Error); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, v, ttl
func (_m *Cache) Set(ctx context.Context, key string, v int, ttl time.Duration) *errors.Error {
	ret := _m.Called(ctx, key, v, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Duration) *errors.Error); ok {
		r0 = rf(ctx, key, v, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// TTL provides a mock function with given fields: ctx, key
func (_m *Cache) TTL(ctx context.Context, key string) time.Duration {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for TTL")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
