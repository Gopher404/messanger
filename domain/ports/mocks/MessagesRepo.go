// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	models "messanger/domain/models"
)

// MessagesRepo is an autogenerated mock type for the MessagesRepo type
type MessagesRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MessagesRepo) Delete(ctx context.Context, id int) *errors.Error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) *errors.Error); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// GetByChat provides a mock function with given fields: ctx, chatId, lastId, count
func (_m *MessagesRepo) GetByChat(ctx context.Context, chatId int, lastId int, count int) ([]models.Message, *errors.Error) {
	ret := _m.Called(ctx, chatId, lastId, count)

	if len(ret) == 0 {
		panic("no return value specified for GetByChat")
	}

	var r0 []models.Message
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]models.Message, *errors.Error)); ok {
		return rf(ctx, chatId, lastId, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []models.Message); ok {
		r0 = rf(ctx, chatId, lastId, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) *errors.Error); ok {
		r1 = rf(ctx, chatId, lastId, count)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MessagesRepo) GetById(ctx context.Context, id int) (*models.Message, *errors.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Message
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Message, *errors.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetMinMassageIdInChat provides a mock function with given fields: ctx, chatId
func (_m *MessagesRepo) GetMinMassageIdInChat(ctx context.Context, chatId int) (int, *errors.Error) {
	ret := _m.Called(ctx, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetMinMassageIdInChat")
	}

	var r0 int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, *errors.Error)); ok {
		return rf(ctx, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, chatId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, chatId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// IsUserMessage provides a mock function with given fields: ctx, id, userId
func (_m *MessagesRepo) IsUserMessage(ctx context.Context, id int, userId int) (bool, *errors.Error) {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for IsUserMessage")
	}

	var r0 bool
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (bool, *errors.Error)); ok {
		return rf(ctx, id, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) bool); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) *errors.Error); ok {
		r1 = rf(ctx, id, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, message
func (_m *MessagesRepo) New(ctx context.Context, message *models.Message) *errors.Error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Message) *errors.Error); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, text
func (_m *MessagesRepo) Update(ctx context.Context, id int, text string) *errors.Error {
	ret := _m.Called(ctx, id, text)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, id, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// NewMessagesRepo creates a new instance of MessagesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagesRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagesRepo {
	mock := &MessagesRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
