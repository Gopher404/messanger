// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	models "messanger/domain/models"

	time "time"
)

// UsersRepo is an autogenerated mock type for the UsersRepo type
type UsersRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UsersRepo) Delete(ctx context.Context, id int) *errors.Error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) *errors.Error); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *UsersRepo) FindByName(ctx context.Context, name string) (*models.User, *errors.Error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *models.User
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, *errors.Error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.Error); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// FindByPhone provides a mock function with given fields: ctx, phone
func (_m *UsersRepo) FindByPhone(ctx context.Context, phone string) (*models.User, *errors.Error) {
	ret := _m.Called(ctx, phone)

	if len(ret) == 0 {
		panic("no return value specified for FindByPhone")
	}

	var r0 *models.User
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, *errors.Error)); ok {
		return rf(ctx, phone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.Error); ok {
		r1 = rf(ctx, phone)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UsersRepo) GetById(ctx context.Context, id int) (*models.User, *errors.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.User
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.User, *errors.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetByIdWithPass provides a mock function with given fields: ctx, id, password
func (_m *UsersRepo) GetByIdWithPass(ctx context.Context, id int, password string) (*models.User, *errors.Error) {
	ret := _m.Called(ctx, id, password)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdWithPass")
	}

	var r0 *models.User
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*models.User, *errors.Error)); ok {
		return rf(ctx, id, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *models.User); ok {
		r0 = rf(ctx, id, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) *errors.Error); ok {
		r1 = rf(ctx, id, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetByPhoneWithPass provides a mock function with given fields: ctx, phone, password
func (_m *UsersRepo) GetByPhoneWithPass(ctx context.Context, phone string, password string) (*models.User, *errors.Error) {
	ret := _m.Called(ctx, phone, password)

	if len(ret) == 0 {
		panic("no return value specified for GetByPhoneWithPass")
	}

	var r0 *models.User
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, *errors.Error)); ok {
		return rf(ctx, phone, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, phone, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *errors.Error); ok {
		r1 = rf(ctx, phone, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetLastOnline provides a mock function with given fields: ctx, userId
func (_m *UsersRepo) GetLastOnline(ctx context.Context, userId int) (time.Time, *errors.Error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOnline")
	}

	var r0 time.Time
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (time.Time, *errors.Error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) time.Time); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, user
func (_m *UsersRepo) New(ctx context.Context, user *models.User) *errors.Error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *errors.Error); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// SetConfirm provides a mock function with given fields: ctx, userId, v
func (_m *UsersRepo) SetConfirm(ctx context.Context, userId int, v bool) *errors.Error {
	ret := _m.Called(ctx, userId, v)

	if len(ret) == 0 {
		panic("no return value specified for SetConfirm")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) *errors.Error); ok {
		r0 = rf(ctx, userId, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// SetShowPhone provides a mock function with given fields: ctx, userId, v
func (_m *UsersRepo) SetShowPhone(ctx context.Context, userId int, v bool) *errors.Error {
	ret := _m.Called(ctx, userId, v)

	if len(ret) == 0 {
		panic("no return value specified for SetShowPhone")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) *errors.Error); ok {
		r0 = rf(ctx, userId, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdateLastOnlineTime provides a mock function with given fields: ctx, userId, _a2
func (_m *UsersRepo) UpdateLastOnlineTime(ctx context.Context, userId int, _a2 time.Time) *errors.Error {
	ret := _m.Called(ctx, userId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastOnlineTime")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time) *errors.Error); ok {
		r0 = rf(ctx, userId, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, userId, password
func (_m *UsersRepo) UpdatePassword(ctx context.Context, userId int, password string) *errors.Error {
	ret := _m.Called(ctx, userId, password)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, userId, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdatePhone provides a mock function with given fields: ctx, userId, phone
func (_m *UsersRepo) UpdatePhone(ctx context.Context, userId int, phone string) *errors.Error {
	ret := _m.Called(ctx, userId, phone)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhone")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, userId, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdateRealName provides a mock function with given fields: ctx, userId, realName
func (_m *UsersRepo) UpdateRealName(ctx context.Context, userId int, realName string) *errors.Error {
	ret := _m.Called(ctx, userId, realName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRealName")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, userId, realName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdateUsername provides a mock function with given fields: ctx, userId, name
func (_m *UsersRepo) UpdateUsername(ctx context.Context, userId int, name string) *errors.Error {
	ret := _m.Called(ctx, userId, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *errors.Error); ok {
		r0 = rf(ctx, userId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// NewUsersRepo creates a new instance of UsersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersRepo {
	mock := &UsersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
