// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "messanger/pkg/errors"

	mock "github.com/stretchr/testify/mock"

	models "messanger/domain/models"

	time "time"
)

// ChatsRepo is an autogenerated mock type for the ChatsRepo type
type ChatsRepo struct {
	mock.Mock
}

// AddUserToChat provides a mock function with given fields: ctx, id, userId
func (_m *ChatsRepo) AddUserToChat(ctx context.Context, id int, userId int) *errors.Error {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToChat")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *errors.Error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// CheckUserInChat provides a mock function with given fields: ctx, userId, chatId
func (_m *ChatsRepo) CheckUserInChat(ctx context.Context, userId int, chatId int) (bool, *errors.Error) {
	ret := _m.Called(ctx, userId, chatId)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserInChat")
	}

	var r0 bool
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (bool, *errors.Error)); ok {
		return rf(ctx, userId, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) bool); ok {
		r0 = rf(ctx, userId, chatId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) *errors.Error); ok {
		r1 = rf(ctx, userId, chatId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// CountUsersInChat provides a mock function with given fields: ctx, id
func (_m *ChatsRepo) CountUsersInChat(ctx context.Context, id int) (int, *errors.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CountUsersInChat")
	}

	var r0 int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, *errors.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ChatsRepo) Delete(ctx context.Context, id int) *errors.Error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) *errors.Error); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ChatsRepo) GetById(ctx context.Context, id int) (*models.Chat, *errors.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Chat
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Chat, *errors.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Chat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *ChatsRepo) GetByUserId(ctx context.Context, userId int) ([]models.Chat, *errors.Error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 []models.Chat
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Chat, *errors.Error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Chat); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetChatListByUser provides a mock function with given fields: ctx, userId
func (_m *ChatsRepo) GetChatListByUser(ctx context.Context, userId int) ([]int, *errors.Error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatListByUser")
	}

	var r0 []int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, *errors.Error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) *errors.Error); ok {
		r1 = rf(ctx, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// GetUserCompanionByChatId provides a mock function with given fields: ctx, userId, chatId
func (_m *ChatsRepo) GetUserCompanionByChatId(ctx context.Context, userId int, chatId int) (int, *errors.Error) {
	ret := _m.Called(ctx, userId, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCompanionByChatId")
	}

	var r0 int
	var r1 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (int, *errors.Error)); ok {
		return rf(ctx, userId, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int); ok {
		r0 = rf(ctx, userId, chatId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) *errors.Error); ok {
		r1 = rf(ctx, userId, chatId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Error)
		}
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, chat
func (_m *ChatsRepo) New(ctx context.Context, chat *models.Chat) *errors.Error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) *errors.Error); ok {
		r0 = rf(ctx, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// RemoveUserFromChat provides a mock function with given fields: ctx, id, userId
func (_m *ChatsRepo) RemoveUserFromChat(ctx context.Context, id int, userId int) *errors.Error {
	ret := _m.Called(ctx, id, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromChat")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *errors.Error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// UpdateTime provides a mock function with given fields: ctx, chatId, _a2
func (_m *ChatsRepo) UpdateTime(ctx context.Context, chatId int, _a2 time.Time) *errors.Error {
	ret := _m.Called(ctx, chatId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTime")
	}

	var r0 *errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time) *errors.Error); ok {
		r0 = rf(ctx, chatId, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Error)
		}
	}

	return r0
}

// NewChatsRepo creates a new instance of ChatsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatsRepo {
	mock := &ChatsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
